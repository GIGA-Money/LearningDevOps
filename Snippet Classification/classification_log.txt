INFO:root:#include <iostream>

void process(int x) {
    std::cout << "Entering process" << std::endl;
    if (x > 5) {
        std::cout << "x is big" << std::endl;
        if (x > 10) {
            std::cout << "x is very big!" << std::endl;
        }
    } else if (x < 0) {
        std::cout << "x is negative" << std::endl;
    }
    std::cout << "Exiting process" << std::endl;
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    std::cout << z << std::endl;
}

int main() {
    process(12);
    std::cout << factorial(5) << std::endl;
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:@import url("https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:wght@200;300;400;700&display=swap");
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  background-color: whitesmoke;
  font-family: "Barlow Semi Condensed", sans-serif;
  line-height: 1.7;
  font-size: 13px;
}

.red-input:focus {
  background: yellow;
  color: red;
}

.testimonials {
  max-width: 1440px;
  margin: 100px auto;
  padding: 20px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

.card {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: rgba(20, 12, 46, 0.1) 0px 48px 100px 0px;
  margin-bottom: 10px;
}

.card__header {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.card__header h3 {
  font-size: 15px;
}

.card__header p {
  opacity: 50%;
}

.ytIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  /* width: 40px; */
  /* height: 40px; */
  border: 50%;
  border: 2px solid rgb(120, 0, 0);
  margin-right: 10px;
}

.meta1Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(22, 11, 235);
  margin-right: 10px;
}

.meta2Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 1.5%;
  border: 50%;
  border: 2px solid rgb(185, 20, 149);
  margin-right: 10px;
}

.twtrIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(0, 158, 186);
  margin-right: 10px;
}

.redIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(255, 83, 15);
  margin-right: 10px;
}

.snapIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(242, 242, 15);
  margin-right: 10px;
}

.card__lead {
  font-size: 1.5rem;
  font-weight: 500;
  line-height: 1.3;
  margin-bottom: 20px;
}

.card__quote {
  font-size: 15px;
  font-weight: 500;
  line-height: 1.4;
  opacity: 70%;
}

.card--bg-purple {
  background: hsl(263, 55%, 52%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 10px;
}

.card--bg-purple:hover {
  background: hsl(263, 97%, 65%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 11px;
}

.card--bg-pink-purple:focus {
  color: black;
  background-position: top 100px right 11px;
}

.card--bg-pink-purple:focus-within {
  color: red;
}

.card--bg-pink-purple:active {
  color: azure;
}

.card--bg-black-blue {
  background: hsl(217, 19%, 35%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-black-blue:hover {
  background: hsl(217, 19%, 50%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-pink-purple {
  background: hsl(309, 100%, 40%);
  color: whitesmoke;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-pink-purple:hover {
  background: hsl(310, 100%, 40%);
  color: yellow;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-yellow-white {
  background: hsl(60, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-yellow-white:hover {
  background: hsla(55, 95%, 46%, 0.803);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-blue-blue {
  background: hsl(184, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-blue-blue:hover {
  background: hsl(180, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-orange-white {
  background: hsl(2, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-orange-white:hover {
  background: hsl(10, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card:nth-last-of-type(1) {
  grid-column: 1/3;
}

.card:nth-last-child(2) {
  grid-column: 1/2;
}

.card:nth-last-of-type(4) {
  grid-column: 2/3;
  grid-row: 2;
}

.card:nth-last-of-type(5) {
  grid-column: 4;
  grid-row: 1/4;
}

footer {
  text-align: center;
}

@media (max-width: 768px) {
  .testimonials {
    grid-template-columns: 1fr;
    width: 100%;
  }
  .card:nth-last-of-type(1) {
    grid-column: 1;
  }
  .card:nth-last-of-type(4) {
    grid-column: 1;
    grid-row: 4;
  }
  .card:nth-last-of-type(5) {
    grid-column: 1;
    grid-row: 5/6;
  }
  .card--bg-purple {
    background: hsl(263, 55%, 52%);
    color: white;
    background-image: url("./images/YTSubScribe.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 10px;
  }
  .card--bg-black-blue {
    background: hsl(217, 19%, 35%);
    color: white;
    background-image: url("./images/FBMeta.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 11px;
  }
}/*# sourceMappingURL=simpleStyle.css.map */ -> Unclassified
INFO:root:using System;

class Program {
    static void Main(string[] args) {
        Process(12);
        Console.WriteLine(Factorial(5));
        Increment(10);
    }

    static void Process(int x) {
        Console.WriteLine("Entering process");
        if (x > 5) {
            Console.WriteLine("x is big");
            if (x > 10) {
                Console.WriteLine("x is very big!");
            }
        } else if (x < 0) {
            Console.WriteLine("x is negative");
        }
        Console.WriteLine("Exiting process");
    }

    static int Factorial(int x) {
        if (x == 0) return 1;
        else return x * Factorial(x - 1);
    }

    static void Increment(int x) {
        int y = x + 1;
        int z = y + 1;
        Console.WriteLine(z);
    }
}
 -> Regular/Finite State
INFO:root:#include <stdio.h>

void process(int x) {
    printf("Entering process\n");
    if (x > 5) {
        printf("x is big\n");
        if (x > 10) {
            printf("x is very big!\n");
        }
    } else if (x < 0) {
        printf("x is negative\n");
    }
    printf("Exiting process\n");
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    printf("%d\n", z);
}

int main() {
    process(12);
    printf("%d\n", factorial(5));
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=
    , initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
    <link rel="stylesheet" href="./dist/simpleStyle.min.css">
    <title>Social Media Testimonials project</title>
</head>

<body>
    <div class="testimonials">
        <div class="card card--bg-purple">
            <header class="card__header">
                <i class="fa-brands fa-youtube ytIcon" alt="Youtube"></i>
                <div>
                    <h3>YouTuber GiG</h3>
                    <p>Verified Tuber</p>
                    <!-- <div><input class="red-input" value="I'll be red when focused." /></div>
     Input field practice and on focus example-->
                </div>
            </header>
            <p class="card__lead">
                I've been a YouTuber for 5-8 years on and off.
            </p>
            <p class="card_quote">
                I've always been impressed with the archiving of my old videos.
            </p>
        </div>
        <div class="card card--bg-black-blue">
            <header class="card__header">
                <i class="fa-brands fa-facebook meta1Icon" alt="Meta"></i>
                <div>
                    <h3>Average Facebook User</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've been a Facebook since day one.
            </p>
            <p class="card__quote">
                I've always been impressed with the archiving of my old post.
            </p>
        </div>
        <div class="card card--bg-pink-purple">
            <header class="card__header">
                <i class="fa-brands fa-instagram meta2Icon" alt="Meta2"></i>
                <div>
                    <h3>Average Real maker</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've seen instagram change every day.
            </p>
            <p class="card__quote">
                I've always found the changes controversial,
                but live with them because I know there's always something hidden.
            </p>
        </div>
        <div class="card card--bg-yellow-white">
            <header class="card__header">
                <i class="fa-brands fa-snapchat snapIcon" alt="Snap"></i>
                <div>
                    <h3>Everyone's Snapchat friend</h3>
                    <p>Verified Snapchat Ideal</p>
                </div>
            </header>
            <p class="card__lead">
                Without Snapchat I'd be out of the loop.
            </p>
            <p class="card__quote">
                Not a day without using snapchat, can't believe it only gets better.
            </p>
        </div>
        <div class="card card--bg-blue-blue">
            <header class="card__header">
                <i class="fa-brands fa-twitter twtrIcon" alt="twtr"></i>
                <div>
                    <h3>Musk Favorite to troll</h3>
                    <p>Verified to be trolled by Musk more than once.</p>
                </div>
            </header>
            <p class="card__lead">
                I've opened myself up to getting trolled, definitely on purpose.
            </p>
            <p class="card__quote">
                I'm not crying you are.
            </p>
        </div>
        <div class="card card--bg-orange-white">
            <header class="card__header">
                <i class="fa-brands fa-reddit redIcon" alt="reddit"></i>
                <div>
                    <h3>Troll dungeon dweller</h3>
                    <p>Verified dungeon dweller.</p>
                </div>
            </header>
            <p class="card__lead">
                Never have I once seen the light of day.
            </p>
            <p class="card__quote">
                What's a vegetable.
            </p>
        </div>
    </div>
    <footer>
        <h3>
            Shout outs to Traversy Media on Youtube and front end mentor
            <a href="https://www.youtube.com/watch?v=0xMQfnTU6oo">CSS Crash Course</a>
        </h3>
    </footer>
</body>

</html> -> Regular/Finite State
INFO:root:public class Main {

    public static void main(String[] args) {
        process(12);
        System.out.println(factorial(5));
        increment(10);
    }

    public static void process(int x) {
        System.out.println("Entering process");
        if (x > 5) {
            System.out.println("x is big");
            if (x > 10) {
                System.out.println("x is very big!");
            }
        } else if (x < 0) {
            System.out.println("x is negative");
        }
        System.out.println("Exiting process");
    }

    public static int factorial(int x) {
        if (x == 0) {
            return 1;
        } else {
            return x * factorial(x - 1);
        }
    }

    public static void increment(int x) {
        int y = x + 1;
        int z = y + 1;
        System.out.println(z);
    }
}
 -> Regular/Finite State
INFO:root:// Get form element
const form = document.getElementById('todoForm');

// Load saved checkbox states from localStorage
for (let i = 0; i < form.elements.length; i++) {
    let checkbox = form.elements[i];
    checkbox.checked = localStorage.getItem(checkbox.id) === "true" ? true : false;
    console.log(i + " form element");

    // Add event listener to save checkbox state on change
    checkbox.addEventListener('change', function() {
        localStorage.setItem(this.id, this.checked);
        console.log(this.id, this.checked)
    });
}
 -> Regular/Finite State
INFO:root:# Snippet with nested conditionals
def process(x):
   print("Entering process")
   if x > 5:
      print("x is big")
      if x > 10:
         print("x is very big!")
   elif x < 0:
      print("x is negative")
   print("Exiting process")

   
# Snippet with recursion
def factorial(x):
   if x == 0: 
      return 1
   else:   
      return x * factorial(x-1)


# Snippet with multiple variables and assignments 
def increment(x):
   y = x + 1
   z = y + 1
   print(z)
   

process(12)
print(factorial(5)) 
increment(10) -> Regular/Finite State
INFO:root:import { defineConfig } from 'cypress';

export default defineConfig({
  component: {
    devServer: {
      framework: 'angular',
      bundler: 'webpack',
    },
    specPattern: '**/*.cy.ts',
  },

  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    baseUrl: 'http://localhost:4200',
    video: false,
  },
});
 -> Unclassified
INFO:root:#include <iostream>

void process(int x) {
    std::cout << "Entering process" << std::endl;
    if (x > 5) {
        std::cout << "x is big" << std::endl;
        if (x > 10) {
            std::cout << "x is very big!" << std::endl;
        }
    } else if (x < 0) {
        std::cout << "x is negative" << std::endl;
    }
    std::cout << "Exiting process" << std::endl;
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    std::cout << z << std::endl;
}

int main() {
    process(12);
    std::cout << factorial(5) << std::endl;
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:@import url("https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:wght@200;300;400;700&display=swap");
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  background-color: whitesmoke;
  font-family: "Barlow Semi Condensed", sans-serif;
  line-height: 1.7;
  font-size: 13px;
}

.red-input:focus {
  background: yellow;
  color: red;
}

.testimonials {
  max-width: 1440px;
  margin: 100px auto;
  padding: 20px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

.card {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: rgba(20, 12, 46, 0.1) 0px 48px 100px 0px;
  margin-bottom: 10px;
}

.card__header {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.card__header h3 {
  font-size: 15px;
}

.card__header p {
  opacity: 50%;
}

.ytIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  /* width: 40px; */
  /* height: 40px; */
  border: 50%;
  border: 2px solid rgb(120, 0, 0);
  margin-right: 10px;
}

.meta1Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(22, 11, 235);
  margin-right: 10px;
}

.meta2Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 1.5%;
  border: 50%;
  border: 2px solid rgb(185, 20, 149);
  margin-right: 10px;
}

.twtrIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(0, 158, 186);
  margin-right: 10px;
}

.redIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(255, 83, 15);
  margin-right: 10px;
}

.snapIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(242, 242, 15);
  margin-right: 10px;
}

.card__lead {
  font-size: 1.5rem;
  font-weight: 500;
  line-height: 1.3;
  margin-bottom: 20px;
}

.card__quote {
  font-size: 15px;
  font-weight: 500;
  line-height: 1.4;
  opacity: 70%;
}

.card--bg-purple {
  background: hsl(263, 55%, 52%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 10px;
}

.card--bg-purple:hover {
  background: hsl(263, 97%, 65%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 11px;
}

.card--bg-pink-purple:focus {
  color: black;
  background-position: top 100px right 11px;
}

.card--bg-pink-purple:focus-within {
  color: red;
}

.card--bg-pink-purple:active {
  color: azure;
}

.card--bg-black-blue {
  background: hsl(217, 19%, 35%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-black-blue:hover {
  background: hsl(217, 19%, 50%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-pink-purple {
  background: hsl(309, 100%, 40%);
  color: whitesmoke;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-pink-purple:hover {
  background: hsl(310, 100%, 40%);
  color: yellow;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-yellow-white {
  background: hsl(60, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-yellow-white:hover {
  background: hsla(55, 95%, 46%, 0.803);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-blue-blue {
  background: hsl(184, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-blue-blue:hover {
  background: hsl(180, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-orange-white {
  background: hsl(2, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-orange-white:hover {
  background: hsl(10, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card:nth-last-of-type(1) {
  grid-column: 1/3;
}

.card:nth-last-child(2) {
  grid-column: 1/2;
}

.card:nth-last-of-type(4) {
  grid-column: 2/3;
  grid-row: 2;
}

.card:nth-last-of-type(5) {
  grid-column: 4;
  grid-row: 1/4;
}

footer {
  text-align: center;
}

@media (max-width: 768px) {
  .testimonials {
    grid-template-columns: 1fr;
    width: 100%;
  }
  .card:nth-last-of-type(1) {
    grid-column: 1;
  }
  .card:nth-last-of-type(4) {
    grid-column: 1;
    grid-row: 4;
  }
  .card:nth-last-of-type(5) {
    grid-column: 1;
    grid-row: 5/6;
  }
  .card--bg-purple {
    background: hsl(263, 55%, 52%);
    color: white;
    background-image: url("./images/YTSubScribe.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 10px;
  }
  .card--bg-black-blue {
    background: hsl(217, 19%, 35%);
    color: white;
    background-image: url("./images/FBMeta.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 11px;
  }
}/*# sourceMappingURL=simpleStyle.css.map */ -> Unclassified
INFO:root:using System;

class Program {
    static void Main(string[] args) {
        Process(12);
        Console.WriteLine(Factorial(5));
        Increment(10);
    }

    static void Process(int x) {
        Console.WriteLine("Entering process");
        if (x > 5) {
            Console.WriteLine("x is big");
            if (x > 10) {
                Console.WriteLine("x is very big!");
            }
        } else if (x < 0) {
            Console.WriteLine("x is negative");
        }
        Console.WriteLine("Exiting process");
    }

    static int Factorial(int x) {
        if (x == 0) return 1;
        else return x * Factorial(x - 1);
    }

    static void Increment(int x) {
        int y = x + 1;
        int z = y + 1;
        Console.WriteLine(z);
    }
}
 -> Regular/Finite State
INFO:root:#include <stdio.h>

void process(int x) {
    printf("Entering process\n");
    if (x > 5) {
        printf("x is big\n");
        if (x > 10) {
            printf("x is very big!\n");
        }
    } else if (x < 0) {
        printf("x is negative\n");
    }
    printf("Exiting process\n");
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    printf("%d\n", z);
}

int main() {
    process(12);
    printf("%d\n", factorial(5));
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=
    , initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
    <link rel="stylesheet" href="./dist/simpleStyle.min.css">
    <title>Social Media Testimonials project</title>
</head>

<body>
    <div class="testimonials">
        <div class="card card--bg-purple">
            <header class="card__header">
                <i class="fa-brands fa-youtube ytIcon" alt="Youtube"></i>
                <div>
                    <h3>YouTuber GiG</h3>
                    <p>Verified Tuber</p>
                    <!-- <div><input class="red-input" value="I'll be red when focused." /></div>
     Input field practice and on focus example-->
                </div>
            </header>
            <p class="card__lead">
                I've been a YouTuber for 5-8 years on and off.
            </p>
            <p class="card_quote">
                I've always been impressed with the archiving of my old videos.
            </p>
        </div>
        <div class="card card--bg-black-blue">
            <header class="card__header">
                <i class="fa-brands fa-facebook meta1Icon" alt="Meta"></i>
                <div>
                    <h3>Average Facebook User</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've been a Facebook since day one.
            </p>
            <p class="card__quote">
                I've always been impressed with the archiving of my old post.
            </p>
        </div>
        <div class="card card--bg-pink-purple">
            <header class="card__header">
                <i class="fa-brands fa-instagram meta2Icon" alt="Meta2"></i>
                <div>
                    <h3>Average Real maker</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've seen instagram change every day.
            </p>
            <p class="card__quote">
                I've always found the changes controversial,
                but live with them because I know there's always something hidden.
            </p>
        </div>
        <div class="card card--bg-yellow-white">
            <header class="card__header">
                <i class="fa-brands fa-snapchat snapIcon" alt="Snap"></i>
                <div>
                    <h3>Everyone's Snapchat friend</h3>
                    <p>Verified Snapchat Ideal</p>
                </div>
            </header>
            <p class="card__lead">
                Without Snapchat I'd be out of the loop.
            </p>
            <p class="card__quote">
                Not a day without using snapchat, can't believe it only gets better.
            </p>
        </div>
        <div class="card card--bg-blue-blue">
            <header class="card__header">
                <i class="fa-brands fa-twitter twtrIcon" alt="twtr"></i>
                <div>
                    <h3>Musk Favorite to troll</h3>
                    <p>Verified to be trolled by Musk more than once.</p>
                </div>
            </header>
            <p class="card__lead">
                I've opened myself up to getting trolled, definitely on purpose.
            </p>
            <p class="card__quote">
                I'm not crying you are.
            </p>
        </div>
        <div class="card card--bg-orange-white">
            <header class="card__header">
                <i class="fa-brands fa-reddit redIcon" alt="reddit"></i>
                <div>
                    <h3>Troll dungeon dweller</h3>
                    <p>Verified dungeon dweller.</p>
                </div>
            </header>
            <p class="card__lead">
                Never have I once seen the light of day.
            </p>
            <p class="card__quote">
                What's a vegetable.
            </p>
        </div>
    </div>
    <footer>
        <h3>
            Shout outs to Traversy Media on Youtube and front end mentor
            <a href="https://www.youtube.com/watch?v=0xMQfnTU6oo">CSS Crash Course</a>
        </h3>
    </footer>
</body>

</html> -> Regular/Finite State
INFO:root:public class Main {

    public static void main(String[] args) {
        process(12);
        System.out.println(factorial(5));
        increment(10);
    }

    public static void process(int x) {
        System.out.println("Entering process");
        if (x > 5) {
            System.out.println("x is big");
            if (x > 10) {
                System.out.println("x is very big!");
            }
        } else if (x < 0) {
            System.out.println("x is negative");
        }
        System.out.println("Exiting process");
    }

    public static int factorial(int x) {
        if (x == 0) {
            return 1;
        } else {
            return x * factorial(x - 1);
        }
    }

    public static void increment(int x) {
        int y = x + 1;
        int z = y + 1;
        System.out.println(z);
    }
}
 -> Regular/Finite State
INFO:root:// Get form element
const form = document.getElementById('todoForm');

// Load saved checkbox states from localStorage
for (let i = 0; i < form.elements.length; i++) {
    let checkbox = form.elements[i];
    checkbox.checked = localStorage.getItem(checkbox.id) === "true" ? true : false;
    console.log(i + " form element");

    // Add event listener to save checkbox state on change
    checkbox.addEventListener('change', function() {
        localStorage.setItem(this.id, this.checked);
        console.log(this.id, this.checked)
    });
}
 -> Regular/Finite State
INFO:root:# Snippet with nested conditionals
def process(x):
   print("Entering process")
   if x > 5:
      print("x is big")
      if x > 10:
         print("x is very big!")
   elif x < 0:
      print("x is negative")
   print("Exiting process")

   
# Snippet with recursion
def factorial(x):
   if x == 0: 
      return 1
   else:   
      return x * factorial(x-1)


# Snippet with multiple variables and assignments 
def increment(x):
   y = x + 1
   z = y + 1
   print(z)
   

process(12)
print(factorial(5)) 
increment(10) -> Regular/Finite State
INFO:root:import { defineConfig } from 'cypress';

export default defineConfig({
  component: {
    devServer: {
      framework: 'angular',
      bundler: 'webpack',
    },
    specPattern: '**/*.cy.ts',
  },

  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    baseUrl: 'http://localhost:4200',
    video: false,
  },
});
 -> Unclassified
INFO:root:#include <iostream>

void process(int x) {
    std::cout << "Entering process" << std::endl;
    if (x > 5) {
        std::cout << "x is big" << std::endl;
        if (x > 10) {
            std::cout << "x is very big!" << std::endl;
        }
    } else if (x < 0) {
        std::cout << "x is negative" << std::endl;
    }
    std::cout << "Exiting process" << std::endl;
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    std::cout << z << std::endl;
}

int main() {
    process(12);
    std::cout << factorial(5) << std::endl;
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:@import url("https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:wght@200;300;400;700&display=swap");
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  background-color: whitesmoke;
  font-family: "Barlow Semi Condensed", sans-serif;
  line-height: 1.7;
  font-size: 13px;
}

.red-input:focus {
  background: yellow;
  color: red;
}

.testimonials {
  max-width: 1440px;
  margin: 100px auto;
  padding: 20px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
}

.card {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: rgba(20, 12, 46, 0.1) 0px 48px 100px 0px;
  margin-bottom: 10px;
}

.card__header {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.card__header h3 {
  font-size: 15px;
}

.card__header p {
  opacity: 50%;
}

.ytIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  /* width: 40px; */
  /* height: 40px; */
  border: 50%;
  border: 2px solid rgb(120, 0, 0);
  margin-right: 10px;
}

.meta1Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(22, 11, 235);
  margin-right: 10px;
}

.meta2Icon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 1.5%;
  border: 50%;
  border: 2px solid rgb(185, 20, 149);
  margin-right: 10px;
}

.twtrIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(0, 158, 186);
  margin-right: 10px;
}

.redIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(255, 83, 15);
  margin-right: 10px;
}

.snapIcon {
  justify-self: center;
  align-self: center;
  font-size: 25px;
  padding: 2.5%;
  border: 50%;
  border: 2px solid rgb(242, 242, 15);
  margin-right: 10px;
}

.card__lead {
  font-size: 1.5rem;
  font-weight: 500;
  line-height: 1.3;
  margin-bottom: 20px;
}

.card__quote {
  font-size: 15px;
  font-weight: 500;
  line-height: 1.4;
  opacity: 70%;
}

.card--bg-purple {
  background: hsl(263, 55%, 52%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 10px;
}

.card--bg-purple:hover {
  background: hsl(263, 97%, 65%);
  color: white;
  background-image: url("./images/YTSubScribe.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 11px;
}

.card--bg-pink-purple:focus {
  color: black;
  background-position: top 100px right 11px;
}

.card--bg-pink-purple:focus-within {
  color: red;
}

.card--bg-pink-purple:active {
  color: azure;
}

.card--bg-black-blue {
  background: hsl(217, 19%, 35%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-black-blue:hover {
  background: hsl(217, 19%, 50%);
  color: white;
  background-image: url("./images/FBMeta.jpg");
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-pink-purple {
  background: hsl(309, 100%, 40%);
  color: whitesmoke;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-pink-purple:hover {
  background: hsl(310, 100%, 40%);
  color: yellow;
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-yellow-white {
  background: hsl(60, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-yellow-white:hover {
  background: hsla(55, 95%, 46%, 0.803);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-blue-blue {
  background: hsl(184, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-blue-blue:hover {
  background: hsl(180, 95%, 46%);
  color: rgb(11, 11, 11);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card--bg-orange-white {
  background: hsl(2, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 100px;
}

.card--bg-orange-white:hover {
  background: hsl(10, 95%, 46%);
  color: rgb(255, 255, 255);
  /* background-image: url('./images/FBMeta.jpg'); */
  background-repeat: no-repeat;
  background-position: top 10px right 101px;
}

.card:nth-last-of-type(1) {
  grid-column: 1/3;
}

.card:nth-last-child(2) {
  grid-column: 1/2;
}

.card:nth-last-of-type(4) {
  grid-column: 2/3;
  grid-row: 2;
}

.card:nth-last-of-type(5) {
  grid-column: 4;
  grid-row: 1/4;
}

footer {
  text-align: center;
}

@media (max-width: 768px) {
  .testimonials {
    grid-template-columns: 1fr;
    width: 100%;
  }
  .card:nth-last-of-type(1) {
    grid-column: 1;
  }
  .card:nth-last-of-type(4) {
    grid-column: 1;
    grid-row: 4;
  }
  .card:nth-last-of-type(5) {
    grid-column: 1;
    grid-row: 5/6;
  }
  .card--bg-purple {
    background: hsl(263, 55%, 52%);
    color: white;
    background-image: url("./images/YTSubScribe.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 10px;
  }
  .card--bg-black-blue {
    background: hsl(217, 19%, 35%);
    color: white;
    background-image: url("./images/FBMeta.jpg");
    background-repeat: no-repeat;
    background-position: top 10px right 11px;
  }
}/*# sourceMappingURL=simpleStyle.css.map */ -> Unclassified
INFO:root:using System;

class Program {
    static void Main(string[] args) {
        Process(12);
        Console.WriteLine(Factorial(5));
        Increment(10);
    }

    static void Process(int x) {
        Console.WriteLine("Entering process");
        if (x > 5) {
            Console.WriteLine("x is big");
            if (x > 10) {
                Console.WriteLine("x is very big!");
            }
        } else if (x < 0) {
            Console.WriteLine("x is negative");
        }
        Console.WriteLine("Exiting process");
    }

    static int Factorial(int x) {
        if (x == 0) return 1;
        else return x * Factorial(x - 1);
    }

    static void Increment(int x) {
        int y = x + 1;
        int z = y + 1;
        Console.WriteLine(z);
    }
}
 -> Regular/Finite State
INFO:root:#include <stdio.h>

void process(int x) {
    printf("Entering process\n");
    if (x > 5) {
        printf("x is big\n");
        if (x > 10) {
            printf("x is very big!\n");
        }
    } else if (x < 0) {
        printf("x is negative\n");
    }
    printf("Exiting process\n");
}

int factorial(int x) {
    if (x == 0) return 1;
    else return x * factorial(x - 1);
}

void increment(int x) {
    int y = x + 1;
    int z = y + 1;
    printf("%d\n", z);
}

int main() {
    process(12);
    printf("%d\n", factorial(5));
    increment(10);
    return 0;
}
 -> Regular/Finite State
INFO:root:<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=
    , initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
    <link rel="stylesheet" href="./dist/simpleStyle.min.css">
    <title>Social Media Testimonials project</title>
</head>

<body>
    <div class="testimonials">
        <div class="card card--bg-purple">
            <header class="card__header">
                <i class="fa-brands fa-youtube ytIcon" alt="Youtube"></i>
                <div>
                    <h3>YouTuber GiG</h3>
                    <p>Verified Tuber</p>
                    <!-- <div><input class="red-input" value="I'll be red when focused." /></div>
     Input field practice and on focus example-->
                </div>
            </header>
            <p class="card__lead">
                I've been a YouTuber for 5-8 years on and off.
            </p>
            <p class="card_quote">
                I've always been impressed with the archiving of my old videos.
            </p>
        </div>
        <div class="card card--bg-black-blue">
            <header class="card__header">
                <i class="fa-brands fa-facebook meta1Icon" alt="Meta"></i>
                <div>
                    <h3>Average Facebook User</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've been a Facebook since day one.
            </p>
            <p class="card__quote">
                I've always been impressed with the archiving of my old post.
            </p>
        </div>
        <div class="card card--bg-pink-purple">
            <header class="card__header">
                <i class="fa-brands fa-instagram meta2Icon" alt="Meta2"></i>
                <div>
                    <h3>Average Real maker</h3>
                    <p>Verified Meta platform User</p>
                </div>
            </header>
            <p class="card__lead">
                I've seen instagram change every day.
            </p>
            <p class="card__quote">
                I've always found the changes controversial,
                but live with them because I know there's always something hidden.
            </p>
        </div>
        <div class="card card--bg-yellow-white">
            <header class="card__header">
                <i class="fa-brands fa-snapchat snapIcon" alt="Snap"></i>
                <div>
                    <h3>Everyone's Snapchat friend</h3>
                    <p>Verified Snapchat Ideal</p>
                </div>
            </header>
            <p class="card__lead">
                Without Snapchat I'd be out of the loop.
            </p>
            <p class="card__quote">
                Not a day without using snapchat, can't believe it only gets better.
            </p>
        </div>
        <div class="card card--bg-blue-blue">
            <header class="card__header">
                <i class="fa-brands fa-twitter twtrIcon" alt="twtr"></i>
                <div>
                    <h3>Musk Favorite to troll</h3>
                    <p>Verified to be trolled by Musk more than once.</p>
                </div>
            </header>
            <p class="card__lead">
                I've opened myself up to getting trolled, definitely on purpose.
            </p>
            <p class="card__quote">
                I'm not crying you are.
            </p>
        </div>
        <div class="card card--bg-orange-white">
            <header class="card__header">
                <i class="fa-brands fa-reddit redIcon" alt="reddit"></i>
                <div>
                    <h3>Troll dungeon dweller</h3>
                    <p>Verified dungeon dweller.</p>
                </div>
            </header>
            <p class="card__lead">
                Never have I once seen the light of day.
            </p>
            <p class="card__quote">
                What's a vegetable.
            </p>
        </div>
    </div>
    <footer>
        <h3>
            Shout outs to Traversy Media on Youtube and front end mentor
            <a href="https://www.youtube.com/watch?v=0xMQfnTU6oo">CSS Crash Course</a>
        </h3>
    </footer>
</body>

</html> -> Regular/Finite State
INFO:root:public class Main {

    public static void main(String[] args) {
        process(12);
        System.out.println(factorial(5));
        increment(10);
    }

    public static void process(int x) {
        System.out.println("Entering process");
        if (x > 5) {
            System.out.println("x is big");
            if (x > 10) {
                System.out.println("x is very big!");
            }
        } else if (x < 0) {
            System.out.println("x is negative");
        }
        System.out.println("Exiting process");
    }

    public static int factorial(int x) {
        if (x == 0) {
            return 1;
        } else {
            return x * factorial(x - 1);
        }
    }

    public static void increment(int x) {
        int y = x + 1;
        int z = y + 1;
        System.out.println(z);
    }
}
 -> Regular/Finite State
INFO:root:// Get form element
const form = document.getElementById('todoForm');

// Load saved checkbox states from localStorage
for (let i = 0; i < form.elements.length; i++) {
    let checkbox = form.elements[i];
    checkbox.checked = localStorage.getItem(checkbox.id) === "true" ? true : false;
    console.log(i + " form element");

    // Add event listener to save checkbox state on change
    checkbox.addEventListener('change', function() {
        localStorage.setItem(this.id, this.checked);
        console.log(this.id, this.checked)
    });
}
 -> Regular/Finite State
INFO:root:# Snippet with nested conditionals
def process(x):
   print("Entering process")
   if x > 5:
      print("x is big")
      if x > 10:
         print("x is very big!")
   elif x < 0:
      print("x is negative")
   print("Exiting process")

   
# Snippet with recursion
def factorial(x):
   if x == 0: 
      return 1
   else:   
      return x * factorial(x-1)


# Snippet with multiple variables and assignments 
def increment(x):
   y = x + 1
   z = y + 1
   print(z)
   

process(12)
print(factorial(5)) 
increment(10) -> Regular/Finite State
INFO:root:import { defineConfig } from 'cypress';

export default defineConfig({
  component: {
    devServer: {
      framework: 'angular',
      bundler: 'webpack',
    },
    specPattern: '**/*.cy.ts',
  },

  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    baseUrl: 'http://localhost:4200',
    video: false,
  },
});
 -> Unclassified
